{"name": "Тест \"вопрос-ответ\"", "status": "broken", "statusDetails": {"message": "Exception: Не удалось кликнуть на элемент: ('css selector', \"button[class*='cookie']\")", "trace": "self = <pages.main_page.MainPage object at 0x0000020F06CE9700>, locator = ('css selector', \"button[class*='cookie']\")\n\n    def click_element(self, locator):\n        try:\n>           element = self.wait.until(EC.element_to_be_clickable(locator))\n\nbase_page.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9449ddaf-c76d-43ac-bd5c-b7dc8dcc4728\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000020F06D48860>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_questions_answers.TestQuestionsAnswers object at 0x0000020F06C7E270>, main_page = <pages.main_page.MainPage object at 0x0000020F06CE9700>, question = 0\nanswer = 'Сутки — 400 рублей. Оплата курьеру — наличными или картой.'\n\n    @allure.title('Тест \"вопрос-ответ\"')\n    @pytest.mark.parametrize('question, answer',\n                             [\n                                 (0, Answers.ANSWER_0),\n                                 (1, Answers.ANSWER_1),\n                                 (2, Answers.ANSWER_2),\n                                 (3, Answers.ANSWER_3),\n                                 (4, Answers.ANSWER_4),\n                                 (5, Answers.ANSWER_5),\n                                 (6, Answers.ANSWER_6),\n                                 (7, Answers.ANSWER_7)\n                             ])\n    def test_questions_and_answer(self, main_page, question, answer):\n>       main_page.click_on_cookie()\n\ntests\\test_questions_answers.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:10: in click_on_cookie\n    self.click_element(MainPageLocators.COOKIE_BUTTON)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.main_page.MainPage object at 0x0000020F06CE9700>, locator = ('css selector', \"button[class*='cookie']\")\n\n    def click_element(self, locator):\n        try:\n            element = self.wait.until(EC.element_to_be_clickable(locator))\n            element.click()\n        except TimeoutException:\n>           raise Exception(f\"Не удалось кликнуть на элемент: {locator}\")\nE           Exception: Не удалось кликнуть на элемент: ('css selector', \"button[class*='cookie']\")\n\nbase_page.py:15: Exception"}, "parameters": [{"name": "question", "value": "0"}, {"name": "answer", "value": "'Сутки — 400 рублей. Оплата курьеру — наличными или картой.'"}], "start": 1724840709625, "stop": 1724840719805, "uuid": "9fd356e7-42e8-45d7-87e5-b750a276e3a5", "historyId": "d31add78cda141bcb010465b7c3679db", "testCaseId": "9af11daebb31336a1e0f62b9f845788e", "fullName": "tests.test_questions_answers.TestQuestionsAnswers#test_questions_and_answer", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_questions_answers"}, {"name": "subSuite", "value": "TestQuestionsAnswers"}, {"name": "host", "value": "ast24help1c2"}, {"name": "thread", "value": "23800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_questions_answers"}]}